version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: taskme_postgres_server
    environment:
      POSTGRES_DB: taskme
      POSTGRES_USER: taskme_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - taskme_network
    restart: unless-stopped
    ports:
      - "9563:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskme_user -d taskme"]
      interval: 30s
      timeout: 10s
      retries: 3
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: taskme_backend_server
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://taskme_user:${DB_PASSWORD}@postgres:5432/taskme
      JWT_SECRET: ${JWT_SECRET}
      PORT: 5000
      CORS_ORIGIN: https://taskme.motorsights.com
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - taskme_network
    restart: unless-stopped
    ports:
      - "9561:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: taskme_frontend_server
    environment:
      VITE_API_URL: https://api-taskme.motorsights.com/api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - taskme_network
    restart: unless-stopped
    ports:
      - "9562:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1


volumes:
  postgres_data:

networks:
  taskme_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
